#!/bin/bash


set -e

echo "Starting deployment process for AI SaaS application..."


echo "Installing prerequisites: Docker, Kubernetes, Minikube..."
sudo apt-get update && sudo apt-get install -y \
    curl \
    wget \
    apt-transport-https \
    ca-certificates \
    software-properties-common \
    iptables

echo "Properties installed"
if ! command -v docker &> /dev/null; then
    echo "Installing Docker..."
    sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
    sudo apt-get install -y docker.io
    sudo systemctl start docker
    sudo systemctl enable docker
else
    echo "Docker already installed."
fi

if ! groups | grep -q "\bdocker\b"; then
	echo "adding user to dockergroup..."
	sudo usermod -aG docker $USER
	echo "restarting script with new permissions"
	exec sg docker "$0"
fi

echo "DockerGroup initialised"

if ! command -v kubectl &> /dev/null; then
    echo "Installing kubectl..."
    sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    sudo install kubectl /usr/local/bin/kubectl
else
    echo "kubectl already installed."
fi


if ! command -v minikube &> /dev/null; then
    echo "Installing Minikube..."
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    sudo install minikube-linux-amd64 /usr/local/bin/minikube
else
    echo "Minikube already installed."
fi

echo 'Checking minikube status...'
if minikube status &>/dev/null; then
	echo 'Stopping and deleting existing minikube cluster...'
	minikube stop
	minikube delete
fi

echo "Starting Minikube..."
minikube start --cpus=3 --memory=15g --driver=docker



echo "Building Docker images for yolo-service and mlflow-service..."
eval $(minikube -p minikube docker-env)


docker build -t yolo-service:latest ./yolo-service
if docker images | grep -q "yolo.*latest"; then
	echo "Yolo Positive"
else
	echo "Yolo Negative"
	exit 1
fi

docker build -t mlflow-service:latest ./mlflow-service
if docker images | grep -q "mlflow.*latest"; then
	echo "MLFlow Positive"
else
	echo "MLFlow Negative"
	exit 1
fi

echo "Deploying Kubernetes resources..."


kubectl apply -f ./k8s/namespace.yaml


kubectl apply -f ./k8s/mongodb/mongodb-statefulset.yaml
kubectl apply -f ./k8s/mongodb/mongodb-service.yaml


kubectl apply -f ./k8s/mlflow/mlflow-deployment.yaml
kubectl apply -f ./k8s/mlflow/mlflow-service.yaml


kubectl apply -f ./k8s/yolo/yolo-deployment.yaml
kubectl apply -f ./k8s/yolo/yolo-service.yaml


kubectl apply -f ./k8s/ingress/ingress.yaml || echo "Ingress not configured. Skipping."

echo "Verifying deployment..."


kubectl wait --for=condition=ready pod --all -n ai-saas --timeout=600s


kubectl get all -n ai-saas


MINIKUBE_IP=$(minikube ip)
echo "Minikube is running at $MINIKUBE_IP"


echo "Application deployed successfully!"
echo "YOLO Service: http://$MINIKUBE_IP:8000"
echo "MLFlow Service: http://$MINIKUBE_IP:8001"
echo "MongoDB is running internally within the Kubernetes cluster."

exit 0
